<?php
/**
 * Plugin Name: Lama Core
 * Description: Property CPT + gated price via WPGraphQL + ACF Free + Taxonomies
 */

// Create a "member" role and a capability for viewing price.
add_action('init', function () {
  if (!get_role('member')) {
    add_role('member', 'Member', ['read' => true]);
  }
  foreach (['administrator','editor','member'] as $r) {
    if ($role = get_role($r)) $role->add_cap('read_price');
  }
});

// Register Property post type.
add_action('init', function () {
  register_post_type('property', [
    'label' => 'Properties',
    'public' => true,
    'supports' => ['title','editor','thumbnail'],
    'has_archive' => true,
    'show_in_rest' => true,
    'show_in_graphql' => true,
    'graphql_single_name' => 'Property',
    'graphql_plural_name' => 'Properties',
  ]);
});

// Register taxonomies for deal types and regions
add_action('init', function () {
  register_taxonomy('dealtype', ['property'], [
    'label' => 'Deal Types',
    'public' => true,
    'show_in_rest' => true,
    'show_in_graphql' => true,
    'graphql_single_name' => 'DealType',
    'graphql_plural_name' => 'DealTypes',
    'hierarchical' => false,
  ]);
  
  register_taxonomy('region', ['property'], [
    'label' => 'Regions',
    'public' => true,
    'show_in_rest' => true,
    'show_in_graphql' => true,
    'graphql_single_name' => 'Region',
    'graphql_plural_name' => 'Regions',
    'hierarchical' => true,
  ]);
});

// Meta for price/currency and contact fields - combined init action
add_action('init', function () {
  // Price and currency meta
  register_post_meta('property', 'price', [
    'type' => 'number',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => function($v){ return is_numeric($v) ? $v : null; },
  ]);
  register_post_meta('property', 'currency', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_text_field',
  ]);
  
  // Contact meta fields
  register_post_meta('property', 'contact_name', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_text_field',
  ]);
  register_post_meta('property', 'contact_email', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_email',
  ]);
  register_post_meta('property', 'contact_phone', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_text_field',
  ]);
  
  // ACF Free fields
  register_post_meta('property', 'address', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_text_field',
  ]);
  register_post_meta('property', 'city', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_text_field',
  ]);
  register_post_meta('property', 'state', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_text_field',
  ]);
  register_post_meta('property', 'zip', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_text_field',
  ]);
  register_post_meta('property', 'sizeAcres', [
    'type' => 'number',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => function($v){ return is_numeric($v) ? $v : null; },
  ]);
  register_post_meta('property', 'priceVisibility', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_text_field',
  ]);
  register_post_meta('property', 'contactVisibility', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_text_field',
  ]);
  register_post_meta('property', 'highlightsText', [
    'type' => 'string',
    'single' => true,
    'show_in_rest' => true,
    'sanitize_callback' => 'sanitize_textarea_field',
  ]);
  
  // ACF Free image fields
  register_post_meta('property', 'heroimage', [
    'type' => 'object',
    'single' => true,
    'show_in_rest' => true,
  ]);
  register_post_meta('property', 'galleryimage1', [
    'type' => 'object',
    'single' => true,
    'show_in_rest' => true,
  ]);
  register_post_meta('property', 'galleryimage2', [
    'type' => 'object',
    'single' => true,
    'show_in_rest' => true,
  ]);
  register_post_meta('property', 'galleryimage3', [
    'type' => 'object',
    'single' => true,
    'show_in_rest' => true,
  ]);
});

add_action('add_meta_boxes', function () {
  add_meta_box('property_pricing', 'Pricing', function($post){
    $price = get_post_meta($post->ID, 'price', true);
    $currency = get_post_meta($post->ID, 'currency', true) ?: 'USD';
    $priceVisibility = get_post_meta($post->ID, 'priceVisibility', true) ?: 'public';
    ?>
      <p>
        <label>Price</label><br/>
        <input type="number" step="0.01" name="lama_price" value="<?php echo esc_attr($price); ?>" />
      </p>
      <p>
        <label>Currency</label><br/>
        <input type="text" name="lama_currency" value="<?php echo esc_attr($currency); ?>" />
      </p>
      <p>
        <label>Price Visibility</label><br/>
        <select name="lama_priceVisibility">
          <option value="public" <?php selected($priceVisibility, 'public'); ?>>Public</option>
          <option value="login" <?php selected($priceVisibility, 'login'); ?>>Login Required</option>
        </select>
      </p>
    <?php
  }, 'property', 'side', 'high');
});

// Meta box for contact info
add_action('add_meta_boxes', function () {
  add_meta_box('property_contact', 'Contact Info', function($post){
    $name  = get_post_meta($post->ID, 'contact_name', true);
    $email = get_post_meta($post->ID, 'contact_email', true);
    $phone = get_post_meta($post->ID, 'contact_phone', true);
    $contactVisibility = get_post_meta($post->ID, 'contactVisibility', true) ?: 'public';
    ?>
      <p><label>Name</label><br/><input type="text" name="lama_contact_name" value="<?php echo esc_attr($name); ?>" /></p>
      <p><label>Email</label><br/><input type="email" name="lama_contact_email" value="<?php echo esc_attr($email); ?>" /></p>
      <p><label>Phone</label><br/><input type="text" name="lama_contact_phone" value="<?php echo esc_attr($phone); ?>" /></p>
      <p>
        <label>Contact Visibility</label><br/>
        <select name="lama_contactVisibility">
          <option value="public" <?php selected($contactVisibility, 'public'); ?>>Public</option>
          <option value="login" <?php selected($contactVisibility, 'login'); ?>>Login Required</option>
        </select>
      </p>
    <?php
  }, 'property', 'side', 'default');
});

// Meta box for property details
add_action('add_meta_boxes', function () {
  add_meta_box('property_details', 'Property Details', function($post){
    $address = get_post_meta($post->ID, 'address', true);
    $city = get_post_meta($post->ID, 'city', true);
    $state = get_post_meta($post->ID, 'state', true);
    $zip = get_post_meta($post->ID, 'zip', true);
    $sizeAcres = get_post_meta($post->ID, 'sizeAcres', true);
    $highlightsText = get_post_meta($post->ID, 'highlightsText', true);
    ?>
      <p><label>Address</label><br/><input type="text" name="lama_address" value="<?php echo esc_attr($address); ?>" /></p>
      <p><label>City</label><br/><input type="text" name="lama_city" value="<?php echo esc_attr($city); ?>" /></p>
      <p><label>State</label><br/><input type="text" name="lama_state" value="<?php echo esc_attr($state); ?>" /></p>
      <p><label>ZIP</label><br/><input type="text" name="lama_zip" value="<?php echo esc_attr($zip); ?>" /></p>
      <p><label>Size (Acres)</label><br/><input type="number" step="0.01" name="lama_sizeAcres" value="<?php echo esc_attr($sizeAcres); ?>" /></p>
      <p><label>Highlights (one per line)</label><br/><textarea name="lama_highlightsText" rows="4" style="width:100%"><?php echo esc_textarea($highlightsText); ?></textarea></p>
    <?php
  }, 'property', 'normal', 'high');
});

// Combined save_post_property action for all fields
add_action('save_post_property', function ($post_id) {
  // Save price and currency
  if (array_key_exists('lama_price', $_POST)) {
    update_post_meta($post_id, 'price', $_POST['lama_price']);
  }
  if (array_key_exists('lama_currency', $_POST)) {
    update_post_meta($post_id, 'currency', sanitize_text_field($_POST['lama_currency']));
  }
  if (array_key_exists('lama_priceVisibility', $_POST)) {
    update_post_meta($post_id, 'priceVisibility', sanitize_text_field($_POST['lama_priceVisibility']));
  }
  
  // Save contact fields
  if (array_key_exists('lama_contact_name', $_POST)) {
    update_post_meta($post_id, 'contact_name', sanitize_text_field($_POST['lama_contact_name']));
  }
  if (array_key_exists('lama_contact_email', $_POST)) {
    update_post_meta($post_id, 'contact_email', sanitize_email($_POST['lama_contact_email']));
  }
  if (array_key_exists('lama_contact_phone', $_POST)) {
    update_post_meta($post_id, 'contact_phone', sanitize_text_field($_POST['lama_contact_phone']));
  }
  if (array_key_exists('lama_contactVisibility', $_POST)) {
    update_post_meta($post_id, 'contactVisibility', sanitize_text_field($_POST['lama_contactVisibility']));
  }
  
  // Save property details
  if (array_key_exists('lama_address', $_POST)) {
    update_post_meta($post_id, 'address', sanitize_text_field($_POST['lama_address']));
  }
  if (array_key_exists('lama_city', $_POST)) {
    update_post_meta($post_id, 'city', sanitize_text_field($_POST['lama_city']));
  }
  if (array_key_exists('lama_state', $_POST)) {
    update_post_meta($post_id, 'state', sanitize_text_field($_POST['lama_state']));
  }
  if (array_key_exists('lama_zip', $_POST)) {
    update_post_meta($post_id, 'zip', sanitize_text_field($_POST['lama_zip']));
  }
  if (array_key_exists('lama_sizeAcres', $_POST)) {
    update_post_meta($post_id, 'sizeAcres', $_POST['lama_sizeAcres']);
  }
  if (array_key_exists('lama_highlightsText', $_POST)) {
    update_post_meta($post_id, 'highlightsText', sanitize_textarea_field($_POST['lama_highlightsText']));
  }
});

// Protected GraphQL fields (null unless user can read_price).
add_action('graphql_register_types', function () {
  register_graphql_field('Property', 'price', [
    'type' => 'Float',
    'description' => 'Visible only to users with read_price capability.',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return current_user_can('read_price') ? (float) get_post_meta($post_id, 'price', true) : null;
    }
  ]);

  register_graphql_field('Property', 'currency', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return current_user_can('read_price') ? (string) get_post_meta($post_id, 'currency', true) : null;
    }
  ]);
  
  register_graphql_field('Property', 'contactName', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return current_user_can('read_price') ? (string) get_post_meta($post_id, 'contact_name', true) : null;
    }
  ]);
  
  register_graphql_field('Property', 'contactEmail', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return current_user_can('read_price') ? (string) get_post_meta($post_id, 'contact_email', true) : null;
    }
  ]);
  
  register_graphql_field('Property', 'contactPhone', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return current_user_can('read_price') ? (string) get_post_meta($post_id, 'contact_phone', true) : null;
    }
  ]);
  
  // ACF Free fields (public)
  register_graphql_field('Property', 'address', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return (string) get_post_meta($post_id, 'address', true);
    }
  ]);
  
  register_graphql_field('Property', 'city', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return (string) get_post_meta($post_id, 'city', true);
    }
  ]);
  
  register_graphql_field('Property', 'state', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return (string) get_post_meta($post_id, 'state', true);
    }
  ]);
  
  register_graphql_field('Property', 'zip', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return (string) get_post_meta($post_id, 'zip', true);
    }
  ]);
  
  register_graphql_field('Property', 'sizeAcres', [
    'type' => 'Float',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return (float) get_post_meta($post_id, 'sizeAcres', true);
    }
  ]);
  
  register_graphql_field('Property', 'priceVisibility', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return (string) get_post_meta($post_id, 'priceVisibility', true);
    }
  ]);
  
  register_graphql_field('Property', 'contactVisibility', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return (string) get_post_meta($post_id, 'contactVisibility', true);
    }
  ]);
  
  register_graphql_field('Property', 'highlightsText', [
    'type' => 'String',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      return (string) get_post_meta($post_id, 'highlightsText', true);
    }
  ]);
  
  // ACF Free image fields
  register_graphql_field('Property', 'heroimage', [
    'type' => 'AcfImage',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      $image_id = get_post_meta($post_id, 'heroimage', true);
      if (!$image_id) return null;
      
      $image = wp_get_attachment_image_src($image_id, 'full');
      if (!$image) return null;
      
      return [
        'url' => $image[0],
        'alt' => get_post_meta($image_id, '_wp_attachment_image_alt', true),
        'width' => $image[1],
        'height' => $image[2],
      ];
    }
  ]);
  
  register_graphql_field('Property', 'galleryimage1', [
    'type' => 'AcfImage',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      $image_id = get_post_meta($post_id, 'galleryimage1', true);
      if (!$image_id) return null;
      
      $image = wp_get_attachment_image_src($image_id, 'full');
      if (!$image) return null;
      
      return [
        'url' => $image[0],
        'alt' => get_post_meta($image_id, '_wp_attachment_image_alt', true),
      ];
    }
  ]);
  
  register_graphql_field('Property', 'galleryimage2', [
    'type' => 'AcfImage',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      $image_id = get_post_meta($post_id, 'galleryimage2', true);
      if (!$image_id) return null;
      
      $image = wp_get_attachment_image_src($image_id, 'full');
      if (!$image) return null;
      
      return [
        'url' => $image[0],
        'alt' => get_post_meta($image_id, '_wp_attachment_image_alt', true),
      ];
    }
  ]);
  
  register_graphql_field('Property', 'galleryimage3', [
    'type' => 'AcfImage',
    'resolve' => function ($post) {
      $post_id = 0;
      if (is_object($post) && isset($post->ID)) {
        $post_id = (int) $post->ID;
      } elseif (is_object($post) && isset($post->databaseId)) {
        $post_id = (int) $post->databaseId;
      } elseif (is_array($post) && isset($post['ID'])) {
        $post_id = (int) $post['ID'];
      }
      if ($post_id <= 0) {
        return null;
      }
      $image_id = get_post_meta($post_id, 'galleryimage3', true);
      if (!$image_id) return null;
      
      $image = wp_get_attachment_image_src($image_id, 'full');
      if (!$image) return null;
      
      return [
        'url' => $image[0],
        'alt' => get_post_meta($image_id, '_wp_attachment_image_alt', true),
      ];
    }
  ]);
});

// Register AcfImage type
add_action('graphql_register_types', function () {
  register_graphql_object_type('AcfImage', [
    'description' => 'ACF Free Image field',
    'fields' => [
      'url' => [
        'type' => 'String',
        'description' => 'Image URL',
      ],
      'alt' => [
        'type' => 'String',
        'description' => 'Alt text',
      ],
      'width' => [
        'type' => 'Int',
        'description' => 'Image width',
      ],
      'height' => [
        'type' => 'Int',
        'description' => 'Image height',
      ],
    ],
  ]);
});

// Create default taxonomy terms
add_action('init', function () {
  // Create default deal types
  if (!term_exists('for-sale', 'dealtype')) {
    wp_insert_term('For Sale', 'dealtype', ['slug' => 'for-sale']);
  }
  if (!term_exists('for-lease', 'dealtype')) {
    wp_insert_term('For Lease', 'dealtype', ['slug' => 'for-lease']);
  }
  
  // Create default regions
  if (!term_exists('dfw', 'region')) {
    wp_insert_term('DFW', 'region', ['slug' => 'dfw']);
  }
  if (!term_exists('houston', 'region')) {
    wp_insert_term('Houston', 'region', ['slug' => 'houston']);
  }
  if (!term_exists('austin', 'region')) {
    wp_insert_term('Austin', 'region', ['slug' => 'austin']);
  }
});


